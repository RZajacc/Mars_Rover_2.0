/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/styles/style.css":
/*!******************************!*\
  !*** ./src/styles/style.css ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack:///./src/styles/style.css?");

/***/ }),

/***/ "./src/Utility/camSelectors.ts":
/*!*************************************!*\
  !*** ./src/Utility/camSelectors.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   camSelectors: () => (/* binding */ camSelectors)\n/* harmony export */ });\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/**\n * Displays camera select element with only those that were used by the rover\n * on the given day. Not all rover's have the same set of cameras, and not all\n * of them are used on any given day.\n * @param {string[]} cameraUsed Array of strings containg camera names used\n * by a rover at given day\n * @param {string} roverName Rover selected by the user\n * @param {string} selectedSolarDay Solar day selected by the user\n * @param {string} pagesCount It is a paginated api, and this number contains\n * calculated number of available pages to display.\n */\nfunction camSelectors(camerasUsed, removeAllChildNodes) {\n    const camInfo = document.querySelector('#cameras-info');\n    camInfo.innerHTML =\n        'Each rover has a diffent set of cameras. Select the ones that are interesting for you:';\n    const camerasList = document.querySelector('#camera-selectors');\n    removeAllChildNodes(camerasList);\n    // *List of available cameras\n    const availableCameras = {\n        ENTRY: 'Entry, Descent, and Landing Camera',\n        FHAZ: 'Front Hazard Avoidance Camera',\n        RHAZ: 'Rear Hazard Avoidance Camera',\n        MAST: 'Mast Camera',\n        CHEMCAM: 'Chemistry and Camera Complex',\n        MAHLI: 'Mars Hand Lens Imager',\n        MARDI: 'Mars Descent Imager',\n        NAVCAM: 'Navigation Camera',\n        PANCAM: 'Panoramic Camera',\n        MINITES: 'Miniature Thermal Emission Spectrometer (Mini-TES)'\n    };\n    const camSelect = document.createElement('select');\n    camSelect.setAttribute('class', 'form-select');\n    camSelect.setAttribute('aria-label', 'camera-select');\n    camSelect.setAttribute('id', 'cam-select');\n    camerasList.appendChild(camSelect);\n    const selectAll = document.createElement('option');\n    selectAll.setAttribute('value', 'ALL');\n    selectAll.textContent = 'All cameras';\n    camSelect.appendChild(selectAll);\n    // *Add cameras options to a list\n    camerasUsed.forEach((camera) => {\n        const selectOption = document.createElement('option');\n        selectOption.setAttribute('value', camera);\n        selectOption.textContent =\n            availableCameras[camera];\n        camSelect.appendChild(selectOption);\n    });\n    return camSelect.getAttribute('id');\n}\n\n\n//# sourceURL=webpack:///./src/Utility/camSelectors.ts?");

/***/ }),

/***/ "./src/Utility/cleanerFunctions.ts":
/*!*****************************************!*\
  !*** ./src/Utility/cleanerFunctions.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cleanAllAfterSolDayInput: () => (/* binding */ cleanAllAfterSolDayInput),\n/* harmony export */   cleanAllDynamicContent: () => (/* binding */ cleanAllDynamicContent),\n/* harmony export */   removeAllChildNodes: () => (/* binding */ removeAllChildNodes)\n/* harmony export */ });\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/* eslint-disable @typescript-eslint/strict-boolean-expressions */\n/**\n * Helper function deleting all child nodes of a provided HTML Element.\n * @param {HTMLElement} parent Element for which you want to delete all child nodes\n */\nfunction removeAllChildNodes(parent) {\n    while (parent.firstChild) {\n        parent.removeChild(parent.firstChild);\n    }\n}\n/**\n * it queries of elements of the page that might contain dynamically generated content\n * and removes it with the help of removeAllChildNodes function.\n */\nfunction cleanAllDynamicContent() {\n    const roverInfo = document.querySelector('#rover-info');\n    removeAllChildNodes(roverInfo);\n    const solDayDescDiv = document.querySelector('#sol-day-desc');\n    removeAllChildNodes(solDayDescDiv);\n    const camerasList = document.querySelector('#camera-selectors');\n    removeAllChildNodes(camerasList);\n    const camInfo = document.querySelector('#cameras-info');\n    camInfo.innerHTML = '';\n    const solDayInput = document.querySelector('#solar-day-input');\n    removeAllChildNodes(solDayInput);\n    // * Get the gallery div and clean it from existing content\n    const photoDiv = document.querySelector('#photo-gallery');\n    removeAllChildNodes(photoDiv);\n    // *Get pagination div and delete the content\n    const pagesDiv = document.querySelector('#pages');\n    removeAllChildNodes(pagesDiv);\n}\nfunction cleanAllAfterSolDayInput() {\n    const camerasList = document.querySelector('#camera-selectors');\n    removeAllChildNodes(camerasList);\n    const camInfo = document.querySelector('#cameras-info');\n    camInfo.innerHTML = '';\n    // * Get the gallery div and clean it from existing content\n    const photoDiv = document.querySelector('#photo-gallery');\n    removeAllChildNodes(photoDiv);\n    const pagesDiv = document.querySelector('#pages');\n    removeAllChildNodes(pagesDiv);\n}\n\n\n//# sourceURL=webpack:///./src/Utility/cleanerFunctions.ts?");

/***/ }),

/***/ "./src/Utility/displayEmptyRoverErr.ts":
/*!*********************************************!*\
  !*** ./src/Utility/displayEmptyRoverErr.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   displayEmptyRoverErr: () => (/* binding */ displayEmptyRoverErr)\n/* harmony export */ });\n/**\n * Simple function displaying a message when rover was not\n * selected from select field in HTML. Before displaying content\n * it uses other util function to clean all previousle generated\n * content on the DOM tree.\n * @param {string} message Message to display on the page\n */\nfunction displayEmptyRoverErr(message, cleanAllDynamicContent) {\n    // * Clear previously generated data\n    cleanAllDynamicContent();\n    // * Create a field to display provided message and append it\n    const roverInfo = document.querySelector('#rover-info');\n    const roverParagraph = document.createElement('p');\n    roverParagraph.innerHTML = message;\n    roverParagraph.setAttribute('style', 'text-align:center; color:red');\n    roverInfo?.appendChild(roverParagraph);\n}\n\n\n//# sourceURL=webpack:///./src/Utility/displayEmptyRoverErr.ts?");

/***/ }),

/***/ "./src/Utility/displayGallery.ts":
/*!***************************************!*\
  !*** ./src/Utility/displayGallery.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   displayGallery: () => (/* binding */ displayGallery)\n/* harmony export */ });\n/**\n * Displays a photo gallery after all necessary options before are provided\n * (like rover, and solar day, optionally also selected camera). Gallery uses\n * bootstrap card group.\n * @param {HTMLDivElement} cardGroup Div element with bootrap classes defining\n * parameters of a card group.\n * @param {responseRover} data Data fetched from the API\n */\nfunction displayGallery(data, removeAllChildNodes) {\n    // * Get the gallery div and clean it from existing content\n    const photoDiv = document.getElementById('photo-gallery');\n    removeAllChildNodes(photoDiv);\n    const pagesDiv = document.getElementById('pages');\n    removeAllChildNodes(pagesDiv);\n    // *Create a div containing cards group\n    const cardGroup = document.createElement('div');\n    cardGroup.setAttribute('id', 'galleryCards');\n    cardGroup.setAttribute('class', 'row row-cols-1 row-cols-md-2 g-3');\n    photoDiv.appendChild(cardGroup);\n    // *Loop through requested data\n    data.photos.forEach((element) => {\n        const colCard = document.createElement('div');\n        colCard.setAttribute('class', 'col');\n        cardGroup.appendChild(colCard);\n        const cardBody = document.createElement('div');\n        cardBody.setAttribute('class', 'card h-100');\n        colCard.appendChild(cardBody);\n        // *Create card body elements\n        const photoRef = document.createElement('a');\n        photoRef.setAttribute('href', element.img_src);\n        photoRef.setAttribute('target', '_blank');\n        cardBody.append(photoRef);\n        const cardPhoto = document.createElement('img');\n        cardPhoto.setAttribute('class', 'card-img-top');\n        cardPhoto.setAttribute('src', element.img_src);\n        cardPhoto.setAttribute('alt', 'Made on: ' + element.earth_date);\n        photoRef.appendChild(cardPhoto);\n        const photoDesc = document.createElement('ul');\n        photoDesc.setAttribute('class', 'list-group list-group-flush');\n        cardBody.appendChild(photoDesc);\n        const roverLi = document.createElement('li');\n        roverLi.setAttribute('class', 'list-group-item');\n        roverLi.innerHTML = '<strong>Rover : </strong>' + element.rover.name;\n        photoDesc.appendChild(roverLi);\n        const solLi = document.createElement('li');\n        solLi.setAttribute('class', 'list-group-item');\n        solLi.innerHTML = '<strong>Solar day : </strong>' + element.sol;\n        photoDesc.appendChild(solLi);\n        const idLi = document.createElement('li');\n        idLi.setAttribute('class', 'list-group-item');\n        idLi.innerHTML = '<strong>Photo ID : </strong>' + element.id;\n        photoDesc.appendChild(idLi);\n        const camLi = document.createElement('li');\n        camLi.setAttribute('class', 'list-group-item');\n        camLi.innerHTML = '<strong>Camera : </strong>' + element.camera.name;\n        photoDesc.appendChild(camLi);\n        // *Create a card footer\n        const cardFooter = document.createElement('div');\n        cardFooter.setAttribute('class', 'card-footer');\n        const footerContent = document.createElement('small');\n        footerContent.setAttribute('class', 'text-body-secondary');\n        footerContent.innerHTML = 'Earth date : ' + element.earth_date;\n        cardBody.appendChild(cardFooter);\n        cardFooter.appendChild(footerContent);\n    });\n}\n\n\n//# sourceURL=webpack:///./src/Utility/displayGallery.ts?");

/***/ }),

/***/ "./src/Utility/displayRoverInfo.ts":
/*!*****************************************!*\
  !*** ./src/Utility/displayRoverInfo.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   displayRoverInfo: () => (/* binding */ displayRoverInfo)\n/* harmony export */ });\n/**\n * If the rover name was selected by a user on the page then data will be fetched\n * from NASA API. This entry doesn't contain images, but it holds a lot of information\n * about selected rovers mission. Part of if will be displayed on the page as a result\n * @param {missionManifest} info Data fetched from NASA API for selected rover\n * @param {string} roverName Name of the rover collected from select input on the page\n */\nfunction displayRoverInfo(info, removeAllChildNodes) {\n    // * Create a field to display provided message and append it\n    const roverInfo = document.querySelector('#rover-info');\n    const roverParagraph = document.createElement('p');\n    roverParagraph.innerHTML = `<strong>${info.name}</strong> was active for \r\n      <strong>${info.max_sol}</strong> solar days, and made \r\n      <strong>${info.total_photos}</strong> during that time. Current mission \r\n      status is <strong id=\"mission-status\">${info.status}</strong>.`;\n    roverInfo.appendChild(roverParagraph);\n    // * Check mission status and add value to a field\n    const missionStatus = document.querySelector('#mission-status');\n    missionStatus.textContent = info.status.toUpperCase();\n    // * Apply color to mission status depending if its active or not\n    if (info.status === 'active') {\n        missionStatus.setAttribute('style', 'color:#7CFC00');\n    }\n    else {\n        missionStatus.setAttribute('style', 'color:red');\n    }\n    // * Generate an input field for solar day\n    const solDayInput = document.querySelector('#solar-day-input');\n    // * Clear previously generated data\n    removeAllChildNodes(solDayInput);\n    const solDaylabel = document.createElement('span');\n    solDaylabel.setAttribute('class', 'input-group-text');\n    solDaylabel.setAttribute('id', 'inputGroup-sizing-sm');\n    solDaylabel.textContent = 'Solar day to display';\n    solDayInput.appendChild(solDaylabel);\n    const solDayInputField = document.createElement('input');\n    solDayInputField.setAttribute('type', 'number');\n    solDayInputField.setAttribute('class', 'form-control');\n    solDayInputField.setAttribute('min', '0');\n    solDayInputField.setAttribute('max', info.max_sol);\n    solDayInputField.setAttribute('aria-label', 'Sizing example input');\n    solDayInputField.setAttribute('aria-describedby', 'inputGroup-sizing-sm');\n    solDayInputField.setAttribute('id', 'selected-solar-day');\n    solDayInputField.setAttribute('placeholder', 'i.e. 1');\n    solDayInput.appendChild(solDayInputField);\n    // * Invalid feedback div\n    const failureDiv = document.createElement('div');\n    failureDiv.setAttribute('class', 'invalid-feedback');\n    failureDiv.setAttribute('hidden', '');\n    failureDiv.setAttribute('id', 'failureDiv');\n    failureDiv.innerHTML = `<strong>Value of range!</strong> You can choose between <strong>0</strong> and <strong>${info.max_sol}</strong>!`;\n    solDayInput.appendChild(failureDiv);\n    const solDayInputID = solDayInputField.getAttribute('id');\n    const failureDivID = failureDiv.getAttribute('id');\n    return [solDayInputID, failureDivID];\n}\n\n\n//# sourceURL=webpack:///./src/Utility/displayRoverInfo.ts?");

/***/ }),

/***/ "./src/Utility/displaySolDayInfo.ts":
/*!******************************************!*\
  !*** ./src/Utility/displaySolDayInfo.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   displaySolDayInfo: () => (/* binding */ displaySolDayInfo)\n/* harmony export */ });\n/**\n * Displays basic information referring to a solar day selected by the user,\n * like how many pictures were taken on that day in total. If there were\n * some pictures taken then also data referring to cameras used by the rover\n * will be collected and provided to a function displaying camera selectors.\n * @param {PhotoManifest[]} photoArr Photos fetched from NASA API for a given\n * solar day.\n * @param {string} roverName Rover selected by the user\n * @param {string} selectedSolarDay Solar day selected by the user\n */\nfunction displaySolDayInfo(photoArr, selectedSolarDay, removeAllChildNodes) {\n    // * Find the array containing selected solar day\n    const selectedData = photoArr.filter((entry) => {\n        const selectedSolarDayInt = parseInt(selectedSolarDay);\n        return entry.sol === selectedSolarDayInt;\n    });\n    const solDayDescDiv = document.querySelector('#sol-day-desc');\n    removeAllChildNodes(solDayDescDiv);\n    const solDayDescParagraph = document.createElement('p');\n    solDayDescDiv.appendChild(solDayDescParagraph);\n    let totalPictures;\n    let camerasUsed = [];\n    // * If there's no match the list still will contain empty array\n    if (selectedData.length !== 0) {\n        totalPictures = selectedData[0].total_photos;\n        camerasUsed = selectedData[0].cameras;\n    }\n    else {\n        totalPictures = 0;\n    }\n    // * Display message on the page\n    solDayDescParagraph.innerHTML = `On <strong>${selectedSolarDay}</strong> \r\n      solar day rover made a total of <strong>${totalPictures}</strong> pictures.`;\n    return [totalPictures, camerasUsed];\n}\n\n\n//# sourceURL=webpack:///./src/Utility/displaySolDayInfo.ts?");

/***/ }),

/***/ "./src/Utility/fetchData.ts":
/*!**********************************!*\
  !*** ./src/Utility/fetchData.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchImages: () => (/* binding */ fetchImages)\n/* harmony export */ });\n/**\n * Requests a data from NASA Api for a selected rover, on a selected solar day. API\n * is paginated (each response contains 25 entries), therefore also page attribute is\n * specified. By default it will always fetch first page, untill its provided otherwise\n * by clicking a page number on pagination at the bottom of the page. In this case\n * data is fetched for all cameras that were used by a rover on this day.\n * @param {string} roverName Rover selected by the user\n * @param {string} selectedSolarDay Solar day selected by the user\n * @param {string} camName Name of the camera selected or all of them otherwise\n * @param {string} page Page user is currently on (default=1).\n */\nasync function fetchImages(roverName, selectedSolarDay, camName, page = '1') {\n    // Fetch URL will be slightly different depending if camera is selected or not\n    let fetchUrl = '';\n    if (camName === 'ALL') {\n        fetchUrl = `https://api.nasa.gov/mars-photos/api/v1/rovers/${roverName}/photos?sol=${selectedSolarDay}&page=${page}&api_key=wlcQTmhFQql1kb762xbFcrn8imjFFLumfDszPmsi`;\n    }\n    else {\n        fetchUrl = `https://api.nasa.gov/mars-photos/api/v1/rovers/${roverName}/photos?sol=${selectedSolarDay}&camera=${camName}&page=${page}&api_key=wlcQTmhFQql1kb762xbFcrn8imjFFLumfDszPmsi`;\n    }\n    // Get the response and data from API\n    const response = await fetch(fetchUrl);\n    const responseData = await response.json();\n    // Throw an error if something goes wrong\n    if (!response.ok) {\n        throw new Error(`Something went wrong.. Error : ${response.status} - ${response.statusText}`);\n    }\n    return responseData;\n}\n\n\n//# sourceURL=webpack:///./src/Utility/fetchData.ts?");

/***/ }),

/***/ "./src/Utility/paginationFixedPages.ts":
/*!*********************************************!*\
  !*** ./src/Utility/paginationFixedPages.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   paginationFixedPages: () => (/* binding */ paginationFixedPages)\n/* harmony export */ });\n/* harmony import */ var _content__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../content */ \"./src/content.ts\");\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\n\n/**\n * Displays bootrap pagination on the bottom of the page. This option is used\n * when user does not select any camera and browse all the photos. Only then is\n * the total amount of pages countable. Therefore logic and form of displaying\n * pagination differs a bit from the one with selected camera. Each time user\n * changes a page to be displayed another piece of data is fetched from the API\n * @param {string} pagesCount Calculated amount of pages that are available to\n * display\n * @param {string} roverName Rover name selected by the user.\n * @param {string} selectedSolarDay Solar day selected by the user.\n * @param {string} camName Selected camera name\n * @param {string} page Current page fethed from the API (page is a attribute\n * for a fetch)\n * @param {utilFuncs} utils Collection of utility functions\n */\nfunction paginationFixedPages(pagesCount, roverName, selectedSolarDay, camName, page, utils) {\n    // Get the gallery and pagination div\n    const photoDiv = document.getElementById('photo-gallery');\n    const pagesDiv = document.getElementById('pages');\n    // Create a pagination if there are more pages than 1\n    if (+pagesCount > 1) {\n        //  Create navigation list\n        const paginationNav = document.createElement('nav');\n        paginationNav.setAttribute('aria-label', 'pagination-nav');\n        pagesDiv.appendChild(paginationNav);\n        const paginationUl = document.createElement('ul');\n        paginationUl.setAttribute('class', 'pagination justify-content-center');\n        paginationNav.appendChild(paginationUl);\n        // Create a move to a FIRST PAGE element\n        const firstLi = document.createElement('li');\n        firstLi.setAttribute('class', 'page-item');\n        const firstHref = document.createElement('a');\n        firstHref.setAttribute('class', 'page-link');\n        firstHref.setAttribute('href', '#');\n        firstHref.textContent = 'First page';\n        firstLi.appendChild(firstHref);\n        paginationUl.appendChild(firstLi);\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        firstHref.addEventListener('click', async () => {\n            const targetPage = '1';\n            utils.removeAllChildNodes(photoDiv);\n            const imagesData = await utils.fetchImages(roverName, selectedSolarDay, camName, targetPage);\n            await (0,_content__WEBPACK_IMPORTED_MODULE_0__.imageDisplaySection)(imagesData, roverName, selectedSolarDay, pagesCount, camName, targetPage, utils);\n        });\n        // SCENARIO 1 - were on the first page and there are 3 or more pages\n        if (+page === 1 && +pagesCount >= 3) {\n            for (let i = +page; i < +page + 3; i++) {\n                const paginationLi = document.createElement('li');\n                paginationLi.setAttribute('class', 'page-item');\n                const paginationHref = document.createElement('a');\n                if (i === +page) {\n                    paginationHref.setAttribute('class', 'page-link active');\n                }\n                else {\n                    paginationHref.setAttribute('class', 'page-link');\n                }\n                paginationHref.setAttribute('href', '#');\n                paginationHref.textContent = i.toString();\n                paginationLi.appendChild(paginationHref);\n                paginationUl.appendChild(paginationLi);\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                paginationHref.addEventListener('click', async () => {\n                    const targetPage = paginationHref.textContent;\n                    utils.removeAllChildNodes(photoDiv);\n                    const imagesData = await utils.fetchImages(roverName, selectedSolarDay, camName, targetPage);\n                    await (0,_content__WEBPACK_IMPORTED_MODULE_0__.imageDisplaySection)(imagesData, roverName, selectedSolarDay, pagesCount, camName, targetPage, utils);\n                });\n            }\n            // SCENARIO 2 - were on the first page and there are 3 or less pages\n        }\n        else if (+page === 1 && +pagesCount <= 3) {\n            for (let i = +page; i < +pagesCount + 1; i++) {\n                const paginationLi = document.createElement('li');\n                paginationLi.setAttribute('class', 'page-item');\n                const paginationHref = document.createElement('a');\n                if (i === +page) {\n                    paginationHref.setAttribute('class', 'page-link active');\n                }\n                else {\n                    paginationHref.setAttribute('class', 'page-link');\n                }\n                paginationHref.setAttribute('href', '#');\n                paginationHref.textContent = i.toString();\n                paginationLi.appendChild(paginationHref);\n                paginationUl.appendChild(paginationLi);\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                paginationHref.addEventListener('click', async () => {\n                    const targetPage = paginationHref.textContent;\n                    utils.removeAllChildNodes(photoDiv);\n                    const imagesData = await utils.fetchImages(roverName, selectedSolarDay, camName, targetPage);\n                    await (0,_content__WEBPACK_IMPORTED_MODULE_0__.imageDisplaySection)(imagesData, roverName, selectedSolarDay, pagesCount, camName, targetPage, utils);\n                });\n            }\n            // SCENARIO 3- were on the last page and there are 3 or more pages\n        }\n        else if (+page === +pagesCount && +pagesCount >= 3) {\n            for (let i = +page - 2; i < +pagesCount + 1; i++) {\n                const paginationLi = document.createElement('li');\n                paginationLi.setAttribute('class', 'page-item');\n                const paginationHref = document.createElement('a');\n                if (i === +page) {\n                    paginationHref.setAttribute('class', 'page-link active');\n                }\n                else {\n                    paginationHref.setAttribute('class', 'page-link');\n                }\n                paginationHref.setAttribute('href', '#');\n                paginationHref.textContent = i.toString();\n                paginationLi.appendChild(paginationHref);\n                paginationUl.appendChild(paginationLi);\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                paginationHref.addEventListener('click', async () => {\n                    const targetPage = paginationHref.textContent;\n                    utils.removeAllChildNodes(photoDiv);\n                    const imagesData = await utils.fetchImages(roverName, selectedSolarDay, camName, targetPage);\n                    await (0,_content__WEBPACK_IMPORTED_MODULE_0__.imageDisplaySection)(imagesData, roverName, selectedSolarDay, pagesCount, camName, targetPage, utils);\n                });\n            }\n            // SCENARIO 4 - were on the last page and there are 3 or less pages\n        }\n        else if (+page === +pagesCount && +pagesCount <= 3) {\n            for (let i = +pagesCount - 1; i < +pagesCount + 1; i++) {\n                const paginationLi = document.createElement('li');\n                paginationLi.setAttribute('class', 'page-item');\n                const paginationHref = document.createElement('a');\n                if (i === +page) {\n                    paginationHref.setAttribute('class', 'page-link active');\n                }\n                else {\n                    paginationHref.setAttribute('class', 'page-link');\n                }\n                paginationHref.setAttribute('href', '#');\n                paginationHref.textContent = i.toString();\n                paginationLi.appendChild(paginationHref);\n                paginationUl.appendChild(paginationLi);\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                paginationHref.addEventListener('click', async () => {\n                    const targetPage = paginationHref.textContent;\n                    utils.removeAllChildNodes(photoDiv);\n                    const imagesData = await utils.fetchImages(roverName, selectedSolarDay, camName, targetPage);\n                    await (0,_content__WEBPACK_IMPORTED_MODULE_0__.imageDisplaySection)(imagesData, roverName, selectedSolarDay, pagesCount, camName, targetPage, utils);\n                });\n            }\n            // SCENARIO 5 - we are somehwere in the middle and we generate current and two neighbouring options\n        }\n        else {\n            for (let i = +page - 1; i < +page + 2; i++) {\n                const paginationLi = document.createElement('li');\n                paginationLi.setAttribute('class', 'page-item');\n                const paginationHref = document.createElement('a');\n                if (i === +page) {\n                    paginationHref.setAttribute('class', 'page-link active');\n                }\n                else {\n                    paginationHref.setAttribute('class', 'page-link');\n                }\n                paginationHref.setAttribute('href', '#');\n                paginationHref.textContent = i.toString();\n                paginationLi.appendChild(paginationHref);\n                paginationUl.appendChild(paginationLi);\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                paginationHref.addEventListener('click', async () => {\n                    const targetPage = paginationHref.textContent;\n                    utils.removeAllChildNodes(photoDiv);\n                    const imagesData = await utils.fetchImages(roverName, selectedSolarDay, camName, targetPage);\n                    await (0,_content__WEBPACK_IMPORTED_MODULE_0__.imageDisplaySection)(imagesData, roverName, selectedSolarDay, pagesCount, camName, targetPage, utils);\n                });\n            }\n        }\n        // Create a move to LAST element\n        const lastLi = document.createElement('li');\n        lastLi.setAttribute('class', 'page-item');\n        const lastHref = document.createElement('a');\n        lastHref.setAttribute('class', 'page-link');\n        lastHref.setAttribute('href', '#');\n        lastHref.textContent = 'Last page';\n        lastLi.appendChild(lastHref);\n        paginationUl.appendChild(lastLi);\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        lastHref.addEventListener('click', async () => {\n            const targetPage = pagesCount;\n            utils.removeAllChildNodes(photoDiv);\n            const imagesData = await utils.fetchImages(roverName, selectedSolarDay, camName, targetPage);\n            await (0,_content__WEBPACK_IMPORTED_MODULE_0__.imageDisplaySection)(imagesData, roverName, selectedSolarDay, pagesCount, camName, targetPage, utils);\n        });\n    }\n}\n\n\n//# sourceURL=webpack:///./src/Utility/paginationFixedPages.ts?");

/***/ }),

/***/ "./src/Utility/paginationUncertainPCount.ts":
/*!**************************************************!*\
  !*** ./src/Utility/paginationUncertainPCount.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   paginationUncertainPCount: () => (/* binding */ paginationUncertainPCount)\n/* harmony export */ });\n/* harmony import */ var _content__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../content */ \"./src/content.ts\");\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\n\n/**\n * Displays bootrap pagination on the bottom of the page. This option is used\n * when user selects a camera. In this case it's impossible to say how many\n * pages are available (without making big amount of requests to the the server).\n * Becayse of that logic and form of displaying pagination differs a bit from the\n * one without selected camera. Each time user changes a page to be displayed another\n * piece of data is fetched from the API\n * @param {string} pagesCount Calculated amount of pages that are available to\n * display\n * @param {string} roverName Rover name selected by the user.\n * @param {string} selectedSolarDay Solar day selected by the user.\n * @param {string} camName Selected camera name\n * @param {string} page Current page fethed from the API (page is a attribute\n * for a fetch)\n * @param {utilFuncs} utils Collection of utility functions\n */\nasync function paginationUncertainPCount(imagesAmount, roverName, selectedSolarDay, camName, pagesCount, page, utils) {\n    // Get the gallery and pagination div\n    const photoDiv = document.getElementById('photo-gallery');\n    // If requested page is empty then move to last working one (Pagination)\n    if (imagesAmount === 0) {\n        const targetPage = +page - 1;\n        utils.removeAllChildNodes(photoDiv);\n        const imagesData = await utils.fetchImages(roverName, selectedSolarDay, camName, targetPage.toString());\n        await (0,_content__WEBPACK_IMPORTED_MODULE_0__.imageDisplaySection)(imagesData, roverName, selectedSolarDay, pagesCount, camName, targetPage.toString(), utils);\n    }\n    else {\n        // Max images per page is 25. Therefor pagination is needed when where on different page than 1, or amount of images is max\n        // since then probably page 2 exists\n        if (imagesAmount === 25 || +page !== 1) {\n            // ? Create navigation and Previous element tab\n            const pagesDiv = document.querySelector('#pages');\n            const paginationNav = document.createElement('nav');\n            paginationNav.setAttribute('aria-label', 'pagination-nav');\n            pagesDiv.appendChild(paginationNav);\n            const paginationUl = document.createElement('ul');\n            paginationUl.setAttribute('class', 'pagination justify-content-center');\n            paginationNav.appendChild(paginationUl);\n            // Create a move to a FIRST PAGE element\n            const firstLi = document.createElement('li');\n            firstLi.setAttribute('class', 'page-item');\n            const firstHref = document.createElement('a');\n            firstHref.setAttribute('class', 'page-link');\n            firstHref.setAttribute('href', '#');\n            firstHref.textContent = 'First Page';\n            firstLi.appendChild(firstHref);\n            paginationUl.appendChild(firstLi);\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\n            firstHref.addEventListener('click', async () => {\n                const targetPage = '1';\n                utils.removeAllChildNodes(photoDiv);\n                const imagesData = await utils.fetchImages(roverName, selectedSolarDay, camName, targetPage.toString());\n                await (0,_content__WEBPACK_IMPORTED_MODULE_0__.imageDisplaySection)(imagesData, roverName, selectedSolarDay, pagesCount, camName, targetPage, utils);\n            });\n            // Create a move to a PREVIOUS PAGE element\n            const previousLi = document.createElement('li');\n            previousLi.setAttribute('class', 'page-item');\n            const previousHref = document.createElement('a');\n            previousHref.setAttribute('class', 'page-link');\n            previousHref.setAttribute('href', '#');\n            previousHref.textContent = 'Previous';\n            previousLi.appendChild(previousHref);\n            paginationUl.appendChild(previousLi);\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\n            previousHref.addEventListener('click', async () => {\n                if (+page > 1) {\n                    const targetPage = +page - 1;\n                    utils.removeAllChildNodes(photoDiv);\n                    const imagesData = await utils.fetchImages(roverName, selectedSolarDay, camName, targetPage.toString());\n                    await (0,_content__WEBPACK_IMPORTED_MODULE_0__.imageDisplaySection)(imagesData, roverName, selectedSolarDay, pagesCount, camName, targetPage.toString(), utils);\n                }\n            });\n            // Create a CURRENT PAGE element\n            const currentLi = document.createElement('li');\n            currentLi.setAttribute('class', 'page-item');\n            const currentHref = document.createElement('a');\n            currentHref.setAttribute('class', 'page-link disabled');\n            currentHref.setAttribute('href', '');\n            currentHref.textContent = page;\n            currentLi.appendChild(currentHref);\n            paginationUl.appendChild(currentLi);\n            // Create a move to NEXT element\n            const nextLi = document.createElement('li');\n            nextLi.setAttribute('class', 'page-item');\n            const nextHref = document.createElement('a');\n            nextHref.setAttribute('class', 'page-link');\n            nextHref.setAttribute('href', '#');\n            nextHref.textContent = 'Next Page';\n            nextLi.appendChild(nextHref);\n            paginationUl.appendChild(nextLi);\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\n            nextHref.addEventListener('click', async () => {\n                const targetPage = +page + 1;\n                utils.removeAllChildNodes(photoDiv);\n                const imagesData = await utils.fetchImages(roverName, selectedSolarDay, camName, targetPage.toString());\n                await (0,_content__WEBPACK_IMPORTED_MODULE_0__.imageDisplaySection)(imagesData, roverName, selectedSolarDay, pagesCount, camName, targetPage.toString(), utils);\n            });\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./src/Utility/paginationUncertainPCount.ts?");

/***/ }),

/***/ "./src/content.ts":
/*!************************!*\
  !*** ./src/content.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chooseRover: () => (/* binding */ chooseRover),\n/* harmony export */   displayCameraSelectorsSection: () => (/* binding */ displayCameraSelectorsSection),\n/* harmony export */   displayRoverInfoSection: () => (/* binding */ displayRoverInfoSection),\n/* harmony export */   displaySolDayInfoSection: () => (/* binding */ displaySolDayInfoSection),\n/* harmony export */   imageDisplaySection: () => (/* binding */ imageDisplaySection)\n/* harmony export */ });\n/* harmony import */ var _Utility_displayGallery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utility/displayGallery */ \"./src/Utility/displayGallery.ts\");\n/* harmony import */ var _Utility_paginationFixedPages__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utility/paginationFixedPages */ \"./src/Utility/paginationFixedPages.ts\");\n/* harmony import */ var _Utility_paginationUncertainPCount__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Utility/paginationUncertainPCount */ \"./src/Utility/paginationUncertainPCount.ts\");\n/* harmony import */ var _Utility_displayEmptyRoverErr__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Utility/displayEmptyRoverErr */ \"./src/Utility/displayEmptyRoverErr.ts\");\n/* harmony import */ var _Utility_cleanerFunctions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Utility/cleanerFunctions */ \"./src/Utility/cleanerFunctions.ts\");\n/* harmony import */ var _Utility_fetchData__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Utility/fetchData */ \"./src/Utility/fetchData.ts\");\n/* harmony import */ var _Utility_displayRoverInfo__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Utility/displayRoverInfo */ \"./src/Utility/displayRoverInfo.ts\");\n/* harmony import */ var _Utility_displaySolDayInfo__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Utility/displaySolDayInfo */ \"./src/Utility/displaySolDayInfo.ts\");\n/* harmony import */ var _Utility_camSelectors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Utility/camSelectors */ \"./src/Utility/camSelectors.ts\");\n/* harmony import */ var _styles_style_css__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./styles/style.css */ \"./src/styles/style.css\");\n\n\n\n\n\n\n\n\n\n\n// ? ----------------------------------------------------------------------\n// ? SELECTING ROVER - Serves as a root call for everytning that comes next\n// ? ----------------------------------------------------------------------\n// Prepare all util functions for a call later\nconst utils = {\n    displayEmptyRoverErr: _Utility_displayEmptyRoverErr__WEBPACK_IMPORTED_MODULE_3__.displayEmptyRoverErr,\n    cleanAllDynamicContent: _Utility_cleanerFunctions__WEBPACK_IMPORTED_MODULE_4__.cleanAllDynamicContent,\n    removeAllChildNodes: _Utility_cleanerFunctions__WEBPACK_IMPORTED_MODULE_4__.removeAllChildNodes,\n    cleanAllAfterSolDayInput: _Utility_cleanerFunctions__WEBPACK_IMPORTED_MODULE_4__.cleanAllAfterSolDayInput,\n    camSelectors: _Utility_camSelectors__WEBPACK_IMPORTED_MODULE_8__.camSelectors,\n    fetchImages: _Utility_fetchData__WEBPACK_IMPORTED_MODULE_5__.fetchImages,\n    displayGallery: _Utility_displayGallery__WEBPACK_IMPORTED_MODULE_0__.displayGallery,\n    paginationFixedPages: _Utility_paginationFixedPages__WEBPACK_IMPORTED_MODULE_1__.paginationFixedPages,\n    paginationUncertainPCount: _Utility_paginationUncertainPCount__WEBPACK_IMPORTED_MODULE_2__.paginationUncertainPCount\n};\n// Function will listen to a select field, and after selection it will fetch information from Nasa Mission Manifest\nconst chooseRover = (utils) => {\n    // Query select field from document\n    const roverSelect = \n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    document.querySelector('#rover-select');\n    // Add an event listenet to it and get selected value\n    roverSelect.addEventListener('change', (e) => {\n        const target = e.target;\n        const roverName = target.value;\n        // In case nothing was selected display an error\n        if (roverName === '') {\n            utils.displayEmptyRoverErr('Nothing to display! Please select a rover!', utils.cleanAllDynamicContent);\n            // If rover was selected fetch data from its mission manifest entry\n        }\n        else {\n            // Fetch mission manifest\n            const manifestUrl = `https://api.nasa.gov/mars-photos/api/v1/manifests/${roverName}/?api_key=wlcQTmhFQql1kb762xbFcrn8imjFFLumfDszPmsi`;\n            fetch(manifestUrl)\n                .then(async (response) => await response.json())\n                .then(async (data) => {\n                await displayRoverInfoSection(data.photo_manifest, roverName, utils);\n            })\n                .catch((error) => {\n                console.log(error);\n            });\n        }\n    });\n};\n// * INIT the function\nchooseRover(utils);\n// ? ---------------------------------------------------------------------------------\n// ? DISPLAY ROVER INFO - display short section with basic information about the rover\n// ? ---------------------------------------------------------------------------------\nconst displayRoverInfoSection = async (info, roverName, utils) => {\n    // Clear previously generated data\n    utils.cleanAllDynamicContent();\n    // Build DOM elements with a function and retrieve ID's of elements required to continue\n    const [solDayInputID, failureDivID] = (0,_Utility_displayRoverInfo__WEBPACK_IMPORTED_MODULE_6__.displayRoverInfo)(info, utils.removeAllChildNodes);\n    // To continue further its necessary to select fields that were generated by this function\n    const solDayInputField = document.getElementById(solDayInputID);\n    const failureDiv = document.getElementById(failureDivID);\n    // Display error if provided value is out of range or call a function to display solar day information\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    solDayInputField.addEventListener('change', async (e) => {\n        const target = e.target;\n        const solDay = target.value;\n        if (parseInt(solDay) >= 0 && parseInt(solDay) <= parseInt(info.max_sol)) {\n            solDayInputField.setAttribute('class', 'form-control is-valid');\n            failureDiv.setAttribute('hidden', '');\n            await displaySolDayInfoSection(info.photos, roverName, solDayInputField.value, utils);\n        }\n        else {\n            solDayInputField.setAttribute('class', 'form-control is-invalid');\n            failureDiv.toggleAttribute('hidden');\n        }\n    });\n};\n// ? ----------------------------------------------------------------------------\n// ? DISPLAY SOLAR DAY INFO - brief information about images made on selected day\n// ? ----------------------------------------------------------------------------\nconst displaySolDayInfoSection = async (photoArr, roverName, selectedSolarDay, utils) => {\n    // Call helper function to display data only for selected day\n    const [totalPictures, camerasUsed] = (0,_Utility_displaySolDayInfo__WEBPACK_IMPORTED_MODULE_7__.displaySolDayInfo)(photoArr, selectedSolarDay, utils.removeAllChildNodes);\n    // If there are any pictures display them, if not, clear the rest of a screen\n    if (totalPictures !== 0) {\n        const pagesCount = Math.ceil(totalPictures / 25).toString();\n        await displayCameraSelectorsSection(camerasUsed, roverName, selectedSolarDay, pagesCount, utils);\n    }\n    else {\n        utils.cleanAllAfterSolDayInput();\n    }\n};\n// ? ------------------------------------------------------------------------------------\n// ? DISPLAY CAMERA SELECTORS - Allows to display all images or only from selected camera\n// ? ------------------------------------------------------------------------------------\nconst displayCameraSelectorsSection = async (camerasUsed, roverName, selectedSolarDay, pagesCount, utils) => {\n    // Get the the Id of the field generated by the function\n    const camSelectID = utils.camSelectors(camerasUsed, utils.removeAllChildNodes);\n    // Query the element\n    const camSelect = document.getElementById(camSelectID);\n    // Call fetch\n    const imagesData = await utils.fetchImages(roverName, selectedSolarDay, 'ALL', '1');\n    await imageDisplaySection(imagesData, roverName, selectedSolarDay, pagesCount, 'ALL', '1', utils);\n    // Basic and expanded fetch differ only selected camera passed as attribute\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    camSelect.addEventListener('change', async () => {\n        const imagesData = await utils.fetchImages(roverName, selectedSolarDay, camSelect.value, '1');\n        await imageDisplaySection(imagesData, roverName, selectedSolarDay, pagesCount, camSelect.value, '1', utils);\n    });\n};\n// ? ----------------------------------------------\n// ? DISPLAYING IMAGES and a suitable pagination\n// ? ----------------------------------------------\nconst imageDisplaySection = async (data, roverName, selectedSolarDay, pagesCount, camName, page, utils) => {\n    // Displaying photos is called from few places\n    utils.displayGallery(data, utils.removeAllChildNodes);\n    // Determine which form of pagination to display\n    if (camName === 'ALL') {\n        utils.paginationFixedPages(pagesCount, roverName, selectedSolarDay, camName, page, utils);\n    }\n    else {\n        const imagesAmount = data.photos.length;\n        await utils.paginationUncertainPCount(imagesAmount, roverName, selectedSolarDay, camName, pagesCount, page, utils);\n    }\n};\n\n\n//# sourceURL=webpack:///./src/content.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/content.ts");
/******/ 	
/******/ })()
;